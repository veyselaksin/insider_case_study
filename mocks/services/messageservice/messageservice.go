// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/messageservice/messageservice.go -package=messageservice -source=service.go
//

// Package messageservice is a generated GoMock package.
package messageservice

import (
	messagedto "insider_case_study/dto/messagedto"
	reflect "reflect"

	v2 "github.com/gofiber/fiber/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// MessageRecipients mocks base method.
func (m *MockService) MessageRecipients(ctx *v2.Ctx) ([]messagedto.MessageRecipientsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageRecipients", ctx)
	ret0, _ := ret[0].([]messagedto.MessageRecipientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageRecipients indicates an expected call of MessageRecipients.
func (mr *MockServiceMockRecorder) MessageRecipients(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageRecipients", reflect.TypeOf((*MockService)(nil).MessageRecipients), ctx)
}

// SendMessage mocks base method.
func (m *MockService) SendMessage(ctx *v2.Ctx, request messagedto.SendMessageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockServiceMockRecorder) SendMessage(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockService)(nil).SendMessage), ctx, request)
}
